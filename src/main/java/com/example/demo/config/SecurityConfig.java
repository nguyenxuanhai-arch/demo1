package com.example.demo.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.config.Customizer;

@Configuration
public class SecurityConfig {
    // üîπ Th√™m PasswordEncoder ƒë·ªÉ tr√°nh l·ªói thi·∫øu Bean
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf().disable()
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/v1/auth/login").permitAll() // Cho ph√©p truy c·∫≠p login
                .anyRequest().authenticated() // C√°c API kh√°c y√™u c·∫ßu x√°c th·ª±c
            )
            .sessionManagement(sess -> sess.sessionCreationPolicy(SessionCreationPolicy.STATELESS)) // D√πng JWT, kh√¥ng d√πng session
            .httpBasic(Customizer.withDefaults()); // N·∫øu b·∫°n d√πng JWT, c√≥ th·ªÉ b·ªè d√≤ng n√†y

        return http.build();
    }
}
